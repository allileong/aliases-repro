"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * A simple utility class for converting durations between minutes, seconds, and milliseconds.
 */
class Duration {
    constructor(quantity, unit = Duration.Unit.MINUTES) {
        this.quantity = quantity;
        this.unit = unit;
    }
    /**
     * Returns a new `Duration` instance created from the specified number of milliseconds.
     *
     * @param quantity The number of milliseconds.
     */
    static milliseconds(quantity) {
        return new Duration(quantity, Duration.Unit.MILLISECONDS);
    }
    /**
     * Returns a new `Duration` instance created from the specified number of seconds.
     *
     * @param quantity The number of seconds.
     */
    static seconds(quantity) {
        return new Duration(quantity, Duration.Unit.SECONDS);
    }
    /**
     * Returns a new `Duration` instance created from the specified number of minutes.
     *
     * @param quantity The number of minutes.
     */
    static minutes(quantity) {
        return new Duration(quantity, Duration.Unit.MINUTES);
    }
    /**
     * Returns the current number of minutes represented by this `Duration` instance, rounded to the nearest integer value.
     */
    get minutes() {
        switch (this.unit) {
            case Duration.Unit.MINUTES:
                return this.quantity;
            case Duration.Unit.SECONDS:
                return Math.round(this.quantity / Duration.SECONDS_IN_MINUTE);
            case Duration.Unit.MILLISECONDS:
                return Math.round(this.quantity / Duration.MILLIS_IN_SECONDS / Duration.SECONDS_IN_MINUTE);
        }
    }
    /**
     * Returns the current number of seconds represented by this `Duration` instance, rounded to the nearest integer value.
     */
    get seconds() {
        switch (this.unit) {
            case Duration.Unit.MINUTES:
                return this.quantity * Duration.SECONDS_IN_MINUTE;
            case Duration.Unit.SECONDS:
                return this.quantity;
            case Duration.Unit.MILLISECONDS:
                return Math.round(this.quantity / Duration.MILLIS_IN_SECONDS);
        }
    }
    /**
     * Returns the current number of milliseconds represented by this `Duration` instance.
     */
    get milliseconds() {
        switch (this.unit) {
            case Duration.Unit.MINUTES:
                return this.quantity * Duration.SECONDS_IN_MINUTE * Duration.MILLIS_IN_SECONDS;
            case Duration.Unit.SECONDS:
                return this.quantity * Duration.MILLIS_IN_SECONDS;
            case Duration.Unit.MILLISECONDS:
                return this.quantity;
        }
    }
}
/**
 * The number of milliseconds in one second.
 */
Duration.MILLIS_IN_SECONDS = 1000;
/**
 * The number of seconds in one minute.
 */
Duration.SECONDS_IN_MINUTE = 60;
exports.Duration = Duration;
(function (Duration) {
    /**
     * Units of duration.
     */
    let Unit;
    (function (Unit) {
        Unit[Unit["MINUTES"] = 0] = "MINUTES";
        Unit[Unit["MILLISECONDS"] = 1] = "MILLISECONDS";
        Unit[Unit["SECONDS"] = 2] = "SECONDS";
    })(Unit = Duration.Unit || (Duration.Unit = {}));
})(Duration = exports.Duration || (exports.Duration = {}));
// underlying function
function sleep(durationOrQuantity, unit = Duration.Unit.MILLISECONDS) {
    const duration = durationOrQuantity instanceof Duration ? durationOrQuantity : new Duration(durationOrQuantity, unit);
    let handle;
    let doResolve;
    const wake = () => {
        if (!handle)
            return;
        clearTimeout(handle);
        handle = undefined;
        doResolve();
    };
    const promise = new Promise(resolve => {
        doResolve = resolve;
        handle = setTimeout(wake, duration.milliseconds);
    });
    return Object.assign(promise, { interrupt: wake });
}
exports.sleep = sleep;
//# sourceMappingURL=duration.js.map